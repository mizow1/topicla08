<?php
require_once 'config.php';

class SEOAnalyzer {
    private $api_key;
    
    public function __construct() {
        $this->api_key = CLAUDE_API_KEY;
    }
    
    public function fetchUrlContent($url) {
        $context = stream_context_create([
            'http' => [
                'method' => 'GET',
                'header' => 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'timeout' => 30
            ]
        ]);
        
        $html = @file_get_contents($url, false, $context);
        if ($html === false) {
            throw new Exception("URLÂèñÂæó„Ç®„É©„Éº: " . $url);
        }
        
        return $html;
    }
    
    public function extractPageInfo($html, $url) {
        $dom = new DOMDocument();
        @$dom->loadHTML($html);
        $xpath = new DOMXPath($dom);
        
        $pageInfo = [
            'url' => $url,
            'title' => '',
            'meta_description' => '',
            'h1_tags' => [],
            'h2_tags' => [],
            'h3_tags' => [],
            'meta_keywords' => '',
            'images_without_alt' => 0,
            'total_images' => 0,
            'internal_links' => 0,
            'external_links' => 0,
            'canonical_url' => '',
            'meta_robots' => '',
            'og_tags' => [],
            'twitter_tags' => [],
            'content_length' => 0
        ];
        
        // „Çø„Ç§„Éà„É´ÂèñÂæó
        $titleNodes = $xpath->query('//title');
        if ($titleNodes->length > 0) {
            $pageInfo['title'] = trim($titleNodes->item(0)->textContent);
        }
        
        // „É°„Çø„Éá„Ç£„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥
        $metaDesc = $xpath->query('//meta[@name="description"]');
        if ($metaDesc->length > 0) {
            $pageInfo['meta_description'] = $metaDesc->item(0)->getAttribute('content');
        }
        
        // „É°„Çø„Ç≠„Éº„ÉØ„Éº„Éâ
        $metaKeywords = $xpath->query('//meta[@name="keywords"]');
        if ($metaKeywords->length > 0) {
            $pageInfo['meta_keywords'] = $metaKeywords->item(0)->getAttribute('content');
        }
        
        // „É≠„Éú„ÉÉ„ÉÑ„É°„Çø
        $metaRobots = $xpath->query('//meta[@name="robots"]');
        if ($metaRobots->length > 0) {
            $pageInfo['meta_robots'] = $metaRobots->item(0)->getAttribute('content');
        }
        
        // „Ç´„Éé„Éã„Ç´„É´URL
        $canonical = $xpath->query('//link[@rel="canonical"]');
        if ($canonical->length > 0) {
            $pageInfo['canonical_url'] = $canonical->item(0)->getAttribute('href');
        }
        
        // Ë¶ãÂá∫„Åó„Çø„Ç∞
        $h1Tags = $xpath->query('//h1');
        foreach ($h1Tags as $h1) {
            $pageInfo['h1_tags'][] = trim($h1->textContent);
        }
        
        $h2Tags = $xpath->query('//h2');
        foreach ($h2Tags as $h2) {
            $pageInfo['h2_tags'][] = trim($h2->textContent);
        }
        
        $h3Tags = $xpath->query('//h3');
        foreach ($h3Tags as $h3) {
            $pageInfo['h3_tags'][] = trim($h3->textContent);
        }
        
        // ÁîªÂÉèÂàÜÊûê
        $images = $xpath->query('//img');
        $pageInfo['total_images'] = $images->length;
        foreach ($images as $img) {
            if (!$img->getAttribute('alt')) {
                $pageInfo['images_without_alt']++;
            }
        }
        
        // „É™„É≥„ÇØÂàÜÊûê
        $links = $xpath->query('//a[@href]');
        $domain = parse_url($url, PHP_URL_HOST);
        
        foreach ($links as $link) {
            $href = $link->getAttribute('href');
            if (strpos($href, 'http') === 0) {
                $linkDomain = parse_url($href, PHP_URL_HOST);
                if ($linkDomain === $domain) {
                    $pageInfo['internal_links']++;
                } else {
                    $pageInfo['external_links']++;
                }
            } elseif (strpos($href, '/') === 0) {
                $pageInfo['internal_links']++;
            }
        }
        
        // OG„Çø„Ç∞
        $ogTags = $xpath->query('//meta[starts-with(@property, "og:")]');
        foreach ($ogTags as $tag) {
            $property = $tag->getAttribute('property');
            $content = $tag->getAttribute('content');
            if ($property && $content) {
                $pageInfo['og_tags'][$property] = $content;
            }
        }
        
        // Twitter„Çø„Ç∞
        $twitterTags = $xpath->query('//meta[starts-with(@name, "twitter:")]');
        foreach ($twitterTags as $tag) {
            $name = $tag->getAttribute('name');
            $content = $tag->getAttribute('content');
            if ($name && $content) {
                $pageInfo['twitter_tags'][$name] = $content;
            }
        }
        
        // „Ç≥„É≥„ÉÜ„É≥„ÉÑÈï∑
        $body = $xpath->query('//body');
        if ($body->length > 0) {
            $pageInfo['content_length'] = strlen(trim($body->item(0)->textContent));
        }
        
        return $pageInfo;
    }
    
    public function analyzeWithClaude($pageInfo, $useMockData = false) {
        if ($useMockData) {
            return $this->getMockAnalysis($pageInfo);
        }
        
        // cURL„ÅåÂà©Áî®ÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if (!function_exists('curl_init')) {
            throw new Exception('cURL„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì');
        }
        
        // APIË®≠ÂÆö„ÅÆÁ¢∫Ë™ç
        if (empty($this->api_key)) {
            throw new Exception('Claude API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        }
        
        if (!preg_match('/^sk-ant-api/', $this->api_key)) {
            throw new Exception('Claude API„Ç≠„Éº„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì');
        }
        
        $analysisPrompt = "
„ÅÇ„Å™„Åü„ÅØSEO„Ç≥„É≥„Çµ„É´„Çø„É≥„Éà„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÂØæË±°„Éö„Éº„Ç∏URL„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
ÂàÜÊûêÁµêÊûú„Çí„Äå„ÉÜ„ÇØ„Éã„Ç´„É´SEO„Äç„Å®„Äå„Ç≥„É≥„ÉÜ„É≥„ÉÑSEO„Äç„ÅÆ2„Å§„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Å´ÂàÜ„Åë„Å¶ÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

=== „Éö„Éº„Ç∏ÊÉÖÂ†± ===
URL: " . $pageInfo['url'] . "
„Çø„Ç§„Éà„É´: " . $pageInfo['title'] . "
„É°„Çø„Éá„Ç£„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥: " . $pageInfo['meta_description'] . "
H1„Çø„Ç∞: " . implode(', ', $pageInfo['h1_tags']) . "
H2„Çø„Ç∞: " . implode(', ', array_slice($pageInfo['h2_tags'], 0, 5)) . "
H3„Çø„Ç∞: " . implode(', ', array_slice($pageInfo['h3_tags'], 0, 5)) . "
ÁîªÂÉèÊï∞: " . $pageInfo['total_images'] . "ÔºàaltÂ±ûÊÄß„Å™„Åó: " . $pageInfo['images_without_alt'] . "Ôºâ
ÂÜÖÈÉ®„É™„É≥„ÇØÊï∞: " . $pageInfo['internal_links'] . "
Â§ñÈÉ®„É™„É≥„ÇØÊï∞: " . $pageInfo['external_links'] . "
„Ç´„Éé„Éã„Ç´„É´URL: " . $pageInfo['canonical_url'] . "
„É°„Çø„É≠„Éú„ÉÉ„ÉÑ: " . $pageInfo['meta_robots'] . "
OG„Çø„Ç∞Êï∞: " . count($pageInfo['og_tags']) . "
Twitter„Ç´„Éº„ÉâÊï∞: " . count($pageInfo['twitter_tags']) . "
„Ç≥„É≥„ÉÜ„É≥„ÉÑÊñáÂ≠óÊï∞: " . $pageInfo['content_length'] . "

=== Âá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„Éà ===
‰ª•‰∏ã„ÅÆÊßãÊàê„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

# üîß „ÉÜ„ÇØ„Éã„Ç´„É´SEOÊîπÂñÑÊ°à

## 1. „É°„Çø„Çø„Ç∞ÊúÄÈÅ©Âåñ

### ÁµêË´ñ
- ÂÖ∑‰ΩìÁöÑ„Å™ÊîπÂñÑÊ°à„ÇíÊèêÁ§∫Ôºà„Ç≥„Éî„Éö„Åß„Åç„ÇãÂΩ¢Âºè„ÅßÔºâ

### Ê†πÊã†
- SEOÊäÄË°ìÁöÑ„Å™Ë¶≥ÁÇπ„Åã„Çâ„ÅÆÊ†πÊã†

### Ë£úË∂≥Ë™¨Êòé
- ÂÆüË£ÖÊñπÊ≥ï„ÇÑÊ≥®ÊÑèÁÇπ

## 2. ÊßãÈÄ†Âåñ„Éá„Éº„Çø„Éª„Çø„Ç∞ÊîπÂñÑ

### ÁµêË´ñ
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ê†πÊã†
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ë£úË∂≥Ë™¨Êòé
[ÂêåÊßò„ÅÆÊßãÊàê]

## 3. ÁîªÂÉè„Éª„É°„Éá„Ç£„Ç¢ÊúÄÈÅ©Âåñ

### ÁµêË´ñ
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ê†πÊã†
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ë£úË∂≥Ë™¨Êòé
[ÂêåÊßò„ÅÆÊßãÊàê]

## 4. ÂÜÖÈÉ®„É™„É≥„ÇØÊßãÈÄ†ÊúÄÈÅ©Âåñ

### ÁµêË´ñ
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ê†πÊã†
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ë£úË∂≥Ë™¨Êòé
[ÂêåÊßò„ÅÆÊßãÊàê]

## 5. „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉªÊäÄË°ìÊîπÂñÑ

### ÁµêË´ñ
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ê†πÊã†
[ÂêåÊßò„ÅÆÊßãÊàê]

### Ë£úË∂≥Ë™¨Êòé
[ÂêåÊßò„ÅÆÊßãÊàê]

---

# ‚úçÔ∏è „Ç≥„É≥„ÉÜ„É≥„ÉÑSEOÊîπÂñÑÊ°à

## 1. „Çø„Ç§„Éà„É´„ÉªË¶ãÂá∫„ÅóÈ≠ÖÂäõÂ∫¶Âêë‰∏ä

### ÁµêË´ñ
- „É¶„Éº„Ç∂„Éº„Å´„Çà„ÇäÈ≠ÖÂäõÁöÑ„ÅßËààÂë≥„ÇíÂºï„Åè„Çø„Ç§„Éà„É´Ê°à„ÇíÊèêÁ§∫
- „ÇØ„É™„ÉÉ„ÇØÁéáÂêë‰∏ä„ÇíÁãô„Å£„ÅüÊîπÂñÑÊ°à

### Ê†πÊã†
- „É¶„Éº„Ç∂„ÉºË°åÂãï„Å®„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÂêë‰∏ä„ÅÆË¶≥ÁÇπ

### Ë£úË∂≥Ë™¨Êòé
- ÂÆüË£ÖÊôÇ„ÅÆÊ≥®ÊÑèÁÇπ„Å®A/B„ÉÜ„Çπ„ÉàÊèêÊ°à

## 2. „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂÖÖÂÆü„ÉªÊã°ÂºµÊèêÊ°à

### ÁµêË´ñ
- ‰∏çË∂≥„Åó„Å¶„ÅÑ„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑË¶ÅÁ¥†„ÅÆÁâπÂÆö
- „É¶„Éº„Ç∂„Éº„ÅÆ„Éã„Éº„Ç∫„Å´Âøú„Åà„ÇãËøΩÂä†„Ç≥„É≥„ÉÜ„É≥„ÉÑÊ°à

### Ê†πÊã†
- Ê§úÁ¥¢ÊÑèÂõ≥„Å®„É¶„Éº„Ç∂„ÉºÊ∫ÄË∂≥Â∫¶„ÅÆË¶≥ÁÇπ

### Ë£úË∂≥Ë™¨Êòé
- ÂÖ∑‰ΩìÁöÑ„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰ΩúÊñπÈáù

## 3. „É¶„Éº„Ç∂„Éº„Ç®„ÇØ„Çπ„Éö„É™„Ç®„É≥„ÇπÂêë‰∏ä

### ÁµêË´ñ
- Ë™≠„Åø„ÇÑ„Åô„Åï„Éª‰Ωø„ÅÑ„ÇÑ„Åô„Åï„ÅÆÊîπÂñÑÊ°à
- „Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÂêë‰∏äÊñΩÁ≠ñ

### Ê†πÊã†
- „É¶„Éº„Ç∂„Éì„É™„ÉÜ„Ç£„Å®SEOÂäπÊûú„ÅÆÈñ¢‰øÇ

### Ë£úË∂≥Ë™¨Êòé
- ÂÖ∑‰ΩìÁöÑ„Å™ÊîπÂñÑÊâãÈ†Ü

## 4. Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„Éâ„Éª„Éà„Éî„ÉÉ„ÇØÊã°Âºµ

### ÁµêË´ñ
- Áãô„ÅÜ„Åπ„ÅçÈñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆÊèêÊ°à
- „Ç≥„É≥„ÉÜ„É≥„ÉÑÊã°Âºµ„ÅÆÊñπÂêëÊÄß

### Ê†πÊã†
- Ê§úÁ¥¢„Éú„É™„É•„Éº„É†„Å®„É¶„Éº„Ç∂„Éº„Éã„Éº„Ç∫ÂàÜÊûê

### Ë£úË∂≥Ë™¨Êòé
- „Ç≠„Éº„ÉØ„Éº„ÉâÊà¶Áï•„ÅÆÂÆüË£ÖÊñπÊ≥ï

## 5. „Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà„Éª„Ç∑„Çß„Ç¢„É©„Éì„É™„ÉÜ„Ç£Âêë‰∏ä

### ÁµêË´ñ
- SNS„Ç∑„Çß„Ç¢„ÇÑ„É¶„Éº„Ç∂„ÉºÂèÇÂä†„Çí‰øÉ„ÅôË¶ÅÁ¥†„ÅÆËøΩÂä†ÊèêÊ°à
- „Çà„ÇäÈ≠ÖÂäõÁöÑ„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Å´„Åô„Çã„Åü„ÇÅ„ÅÆÊñΩÁ≠ñ

### Ê†πÊã†
- „ÇΩ„Éº„Ç∑„É£„É´„Ç∑„Ç∞„Éä„É´„Å®SEOÂäπÊûú

### Ë£úË∂≥Ë™¨Êòé
- ÂÖ∑‰ΩìÁöÑ„Å™ÂÆüË£Ö„Ç¢„Ç§„Éá„Ç¢

‰∏äË®ò„ÅÆÊßãÊàê„Åß„ÄÅ„ÉÜ„ÇØ„Éã„Ç´„É´SEO„ÅØÊäÄË°ìÁöÑ„Å™ÊîπÂñÑÁÇπ„Çí„ÄÅ„Ç≥„É≥„ÉÜ„É≥„ÉÑSEO„ÅØ„É¶„Éº„Ç∂„Éº„Å´„Å®„Å£„Å¶„Çà„ÇäÈ≠ÖÂäõÁöÑ„ÅßËààÂë≥„ÇíÂºï„ÅèÂÜÖÂÆπ„Å´„Åô„ÇãÊèêÊ°à„Çí‰∏≠ÂøÉ„Å´ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";

        $data = [
            // 'model' => 'claude-3-7-sonnet-latest',
            'model' => 'claude-sonnet-4-20250514',
            'max_tokens' => 50000,
            'temperature' => 0.3,
            'messages' => [
                [
                    'role' => 'user',
                    'content' => $analysisPrompt
                ]
            ]
        ];
        
        // cURL„Çí‰ΩøÁî®„Åó„Å¶APIÂëº„Å≥Âá∫„Åó
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://api.anthropic.com/v1/messages');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_TIMEOUT, 60);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
        curl_setopt($ch, CURLOPT_USERAGENT, 'PHP-cURL/8.3');
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_MAXREDIRS, 3);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'x-api-key: ' . $this->api_key,
            'anthropic-version: 2023-06-01',
            'Content-Length: ' . strlen(json_encode($data))
        ]);
        
        $response = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $curl_error = curl_error($ch);
        $curl_info = curl_getinfo($ch);
        curl_close($ch);
        
        // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„Çí„É≠„Ç∞„Å´Âá∫Âäõ
        error_log('Claude API Debug Info: ' . json_encode([
            'http_code' => $http_code,
            'curl_error' => $curl_error,
            'response_length' => strlen($response),
            'connect_time' => $curl_info['connect_time'],
            'total_time' => $curl_info['total_time']
        ]));
        
        if ($response === false) {
            throw new Exception('Claude APIÈÄö‰ø°„Ç®„É©„Éº: ' . $curl_error);
        }
        
        if ($http_code !== 200) {
            $error_msg = 'Claude API HTTP„Ç®„É©„Éº: ' . $http_code;
            if (!empty($response)) {
                $decoded = json_decode($response, true);
                if ($decoded && isset($decoded['error']['message'])) {
                    $error_msg .= ' - ' . $decoded['error']['message'];
                }
            }
            throw new Exception($error_msg);
        }
        
        $result = json_decode($response, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            error_log('JSON decode error: ' . json_last_error_msg());
            throw new Exception('„É¨„Çπ„Éù„É≥„ÇπËß£Êûê„Ç®„É©„Éº');
        }
        
        if (isset($result['error'])) {
            error_log('Claude API error: ' . json_encode($result['error']));
            throw new Exception('Claude API„Ç®„É©„Éº: ' . $result['error']['message']);
        }
        
        if (!isset($result['content'][0]['text'])) {
            error_log('Unexpected response format: ' . json_encode($result));
            throw new Exception('‰∫àÊúü„Åó„Å™„ÅÑ„É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè');
        }
        
        return $result['content'][0]['text'];
    }
    
    private function getMockAnalysis($pageInfo) {

    }
    
    public function analyzeUrl($url, $useMockData = false) {
        echo "URLÂèñÂæó‰∏≠: " . $url . "\n";
        $html = $this->fetchUrlContent($url);
        
        echo "„Éö„Éº„Ç∏ÊÉÖÂ†±ÊäΩÂá∫‰∏≠...\n";
        $pageInfo = $this->extractPageInfo($html, $url);
        
        if ($useMockData) {
            echo "„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÅßSEOÂàÜÊûê‰∏≠...\n";
        } else {
            echo "Claude API„ÅßSEOÂàÜÊûê‰∏≠...\n";
        }
        $analysis = $this->analyzeWithClaude($pageInfo, $useMockData);
        
        return [
            'page_info' => $pageInfo,
            'seo_analysis' => $analysis
        ];
    }
}

// ÂÆüË°åÈÉ®ÂàÜ
if (php_sapi_name() === 'cli') {
    $analyzer = new SEOAnalyzer();
    $url = "https://yamalog.flow-t.net/gear/tiger-bottle/";
    
    try {
        $result = $analyzer->analyzeUrl($url);
        
        echo "\n" . str_repeat("=", 80) . "\n";
        echo "SEOÂàÜÊûêÁµêÊûú\n";
        echo str_repeat("=", 80) . "\n";
        echo $result['seo_analysis'] . "\n";
        echo "\n" . str_repeat("=", 80) . "\n";
        
        // ÁµêÊûú„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        $output = "URL: " . $url . "\n";
        $output .= str_repeat("=", 80) . "\n";
        $output .= $result['seo_analysis'] . "\n";
        $output .= "\n" . str_repeat("=", 80) . "\n";
        $output .= "Ë©≥Á¥∞„Éá„Éº„Çø: " . json_encode($result['page_info'], JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
        
        file_put_contents('seo_analysis_result.txt', $output);
        echo "ÂàÜÊûêÁµêÊûú„Çíseo_analysis_result.txt„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü\n";
        
    } catch (Exception $e) {
        echo "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: " . $e->getMessage() . "\n";
    }
}
?>